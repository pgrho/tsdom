<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#
// <copyright file="ILTranslatorEvents.tt" company="">
//  Copyright Â© . All Rights Reserved.
// </copyright>

var types = new []{
	"AnonymousMethodExpression",
	"UndocumentedExpression",
	"ArrayCreateExpression",
	"ArrayInitializerExpression",
	"AsExpression",
	"AssignmentExpression",
	"BaseReferenceExpression",
	"BinaryOperatorExpression",
	"CastExpression",
	"CheckedExpression",
	"ConditionalExpression",
	"DefaultValueExpression",
	"DirectionExpression",
	"IdentifierExpression",
	"IndexerExpression",
	"InvocationExpression",
	"IsExpression",
	"LambdaExpression",
	"MemberReferenceExpression",
	"NamedArgumentExpression",
	"NamedExpression",
	"NullReferenceExpression",
	"ObjectCreateExpression",
	"AnonymousTypeCreateExpression",
	"ParenthesizedExpression",
	"PointerReferenceExpression",
	"PrimitiveExpression",
	"SizeOfExpression",
	"StackAllocExpression",
	"ThisReferenceExpression",
	"TypeOfExpression",
	"TypeReferenceExpression",
	"UnaryOperatorExpression",
	"UncheckedExpression",
/*	"QueryExpression",
	"QueryContinuationClause",
	"QueryFromClause",
	"QueryLetClause",
	"QueryWhereClause",
	"QueryJoinClause",
	"QueryOrderClause",
	"QueryOrdering",
	"QuerySelectClause",*/
	"QueryGroupClause",
	"Attribute",
	"AttributeSection",
	"DelegateDeclaration",
	"NamespaceDeclaration",
	"TypeDeclaration",
//	"UsingAliasDeclaration",
//	"UsingDeclaration",
	"ExternAliasDeclaration",
	"BlockStatement",
	"BreakStatement",
	"CheckedStatement",
	"ContinueStatement",
	"DoWhileStatement",
//	"EmptyStatement",
	"ExpressionStatement",
	"FixedStatement",
	"ForeachStatement",
	"ForStatement",
	"GotoCaseStatement",
	"GotoDefaultStatement",
	"GotoStatement",
	"IfElseStatement",
	"LabelStatement",
	"LockStatement",
	"ReturnStatement",
	"SwitchStatement",
	"SwitchSection",
	"CaseLabel",
	"ThrowStatement",
	"TryCatchStatement",
	"CatchClause",
	"UncheckedStatement",
	"UnsafeStatement",
	"UsingStatement",
	"VariableDeclarationStatement",
	"WhileStatement",
	"YieldBreakStatement",
	"YieldReturnStatement",
	"Accessor",
	"ConstructorDeclaration",
	"ConstructorInitializer",
	"DestructorDeclaration",
	"EnumMemberDeclaration",
	"EventDeclaration",
	"CustomEventDeclaration",
	"FieldDeclaration",
	"IndexerDeclaration",
	"MethodDeclaration",
	"OperatorDeclaration",
	"ParameterDeclaration",
	"PropertyDeclaration",
	"VariableInitializer",
	"FixedFieldDeclaration",
	"FixedVariableInitializer",
//	"PreProcessorDirective",
	"DocumentationReference",
	"TypeParameterDeclaration",
	"Constraint",
	"CSharpTokenNode",
	"Identifier",
//	"PatternPlaceholder",
};

#>
using ICSharpCode.NRefactory.CSharp;

namespace Shipwreck.TypeScriptModels.Decompiler
{
    partial class ILTranslator
    {
<#
foreach (var t in types)
{
#>
		public event System.EventHandler<VisitingEventArgs<<#= t #>>> Visiting<#= t #>;
		public event System.EventHandler<VisitedEventArgs<<#= t #>>> Visited<#= t #>;
<#
}
#>
	}
}