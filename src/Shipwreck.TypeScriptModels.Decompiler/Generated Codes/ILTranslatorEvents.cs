using ICSharpCode.NRefactory.CSharp;

namespace Shipwreck.TypeScriptModels.Decompiler
{
    partial class ILTranslator
    {
		public event System.EventHandler<VisitingEventArgs<AnonymousMethodExpression>> VisitingAnonymousMethodExpression;
		public event System.EventHandler<VisitedEventArgs<AnonymousMethodExpression>> VisitedAnonymousMethodExpression;
		public event System.EventHandler<VisitingEventArgs<UndocumentedExpression>> VisitingUndocumentedExpression;
		public event System.EventHandler<VisitedEventArgs<UndocumentedExpression>> VisitedUndocumentedExpression;
		public event System.EventHandler<VisitingEventArgs<ArrayCreateExpression>> VisitingArrayCreateExpression;
		public event System.EventHandler<VisitedEventArgs<ArrayCreateExpression>> VisitedArrayCreateExpression;
		public event System.EventHandler<VisitingEventArgs<ArrayInitializerExpression>> VisitingArrayInitializerExpression;
		public event System.EventHandler<VisitedEventArgs<ArrayInitializerExpression>> VisitedArrayInitializerExpression;
		public event System.EventHandler<VisitingEventArgs<AsExpression>> VisitingAsExpression;
		public event System.EventHandler<VisitedEventArgs<AsExpression>> VisitedAsExpression;
		public event System.EventHandler<VisitingEventArgs<AssignmentExpression>> VisitingAssignmentExpression;
		public event System.EventHandler<VisitedEventArgs<AssignmentExpression>> VisitedAssignmentExpression;
		public event System.EventHandler<VisitingEventArgs<BaseReferenceExpression>> VisitingBaseReferenceExpression;
		public event System.EventHandler<VisitedEventArgs<BaseReferenceExpression>> VisitedBaseReferenceExpression;
		public event System.EventHandler<VisitingEventArgs<BinaryOperatorExpression>> VisitingBinaryOperatorExpression;
		public event System.EventHandler<VisitedEventArgs<BinaryOperatorExpression>> VisitedBinaryOperatorExpression;
		public event System.EventHandler<VisitingEventArgs<CastExpression>> VisitingCastExpression;
		public event System.EventHandler<VisitedEventArgs<CastExpression>> VisitedCastExpression;
		public event System.EventHandler<VisitingEventArgs<CheckedExpression>> VisitingCheckedExpression;
		public event System.EventHandler<VisitedEventArgs<CheckedExpression>> VisitedCheckedExpression;
		public event System.EventHandler<VisitingEventArgs<ConditionalExpression>> VisitingConditionalExpression;
		public event System.EventHandler<VisitedEventArgs<ConditionalExpression>> VisitedConditionalExpression;
		public event System.EventHandler<VisitingEventArgs<DefaultValueExpression>> VisitingDefaultValueExpression;
		public event System.EventHandler<VisitedEventArgs<DefaultValueExpression>> VisitedDefaultValueExpression;
		public event System.EventHandler<VisitingEventArgs<DirectionExpression>> VisitingDirectionExpression;
		public event System.EventHandler<VisitedEventArgs<DirectionExpression>> VisitedDirectionExpression;
		public event System.EventHandler<VisitingEventArgs<IdentifierExpression>> VisitingIdentifierExpression;
		public event System.EventHandler<VisitedEventArgs<IdentifierExpression>> VisitedIdentifierExpression;
		public event System.EventHandler<VisitingEventArgs<IndexerExpression>> VisitingIndexerExpression;
		public event System.EventHandler<VisitedEventArgs<IndexerExpression>> VisitedIndexerExpression;
		public event System.EventHandler<VisitingEventArgs<InvocationExpression>> VisitingInvocationExpression;
		public event System.EventHandler<VisitedEventArgs<InvocationExpression>> VisitedInvocationExpression;
		public event System.EventHandler<VisitingEventArgs<IsExpression>> VisitingIsExpression;
		public event System.EventHandler<VisitedEventArgs<IsExpression>> VisitedIsExpression;
		public event System.EventHandler<VisitingEventArgs<LambdaExpression>> VisitingLambdaExpression;
		public event System.EventHandler<VisitedEventArgs<LambdaExpression>> VisitedLambdaExpression;
		public event System.EventHandler<VisitingEventArgs<MemberReferenceExpression>> VisitingMemberReferenceExpression;
		public event System.EventHandler<VisitedEventArgs<MemberReferenceExpression>> VisitedMemberReferenceExpression;
		public event System.EventHandler<VisitingEventArgs<NamedArgumentExpression>> VisitingNamedArgumentExpression;
		public event System.EventHandler<VisitedEventArgs<NamedArgumentExpression>> VisitedNamedArgumentExpression;
		public event System.EventHandler<VisitingEventArgs<NamedExpression>> VisitingNamedExpression;
		public event System.EventHandler<VisitedEventArgs<NamedExpression>> VisitedNamedExpression;
		public event System.EventHandler<VisitingEventArgs<NullReferenceExpression>> VisitingNullReferenceExpression;
		public event System.EventHandler<VisitedEventArgs<NullReferenceExpression>> VisitedNullReferenceExpression;
		public event System.EventHandler<VisitingEventArgs<ObjectCreateExpression>> VisitingObjectCreateExpression;
		public event System.EventHandler<VisitedEventArgs<ObjectCreateExpression>> VisitedObjectCreateExpression;
		public event System.EventHandler<VisitingEventArgs<AnonymousTypeCreateExpression>> VisitingAnonymousTypeCreateExpression;
		public event System.EventHandler<VisitedEventArgs<AnonymousTypeCreateExpression>> VisitedAnonymousTypeCreateExpression;
		public event System.EventHandler<VisitingEventArgs<ParenthesizedExpression>> VisitingParenthesizedExpression;
		public event System.EventHandler<VisitedEventArgs<ParenthesizedExpression>> VisitedParenthesizedExpression;
		public event System.EventHandler<VisitingEventArgs<PointerReferenceExpression>> VisitingPointerReferenceExpression;
		public event System.EventHandler<VisitedEventArgs<PointerReferenceExpression>> VisitedPointerReferenceExpression;
		public event System.EventHandler<VisitingEventArgs<PrimitiveExpression>> VisitingPrimitiveExpression;
		public event System.EventHandler<VisitedEventArgs<PrimitiveExpression>> VisitedPrimitiveExpression;
		public event System.EventHandler<VisitingEventArgs<SizeOfExpression>> VisitingSizeOfExpression;
		public event System.EventHandler<VisitedEventArgs<SizeOfExpression>> VisitedSizeOfExpression;
		public event System.EventHandler<VisitingEventArgs<StackAllocExpression>> VisitingStackAllocExpression;
		public event System.EventHandler<VisitedEventArgs<StackAllocExpression>> VisitedStackAllocExpression;
		public event System.EventHandler<VisitingEventArgs<ThisReferenceExpression>> VisitingThisReferenceExpression;
		public event System.EventHandler<VisitedEventArgs<ThisReferenceExpression>> VisitedThisReferenceExpression;
		public event System.EventHandler<VisitingEventArgs<TypeOfExpression>> VisitingTypeOfExpression;
		public event System.EventHandler<VisitedEventArgs<TypeOfExpression>> VisitedTypeOfExpression;
		public event System.EventHandler<VisitingEventArgs<TypeReferenceExpression>> VisitingTypeReferenceExpression;
		public event System.EventHandler<VisitedEventArgs<TypeReferenceExpression>> VisitedTypeReferenceExpression;
		public event System.EventHandler<VisitingEventArgs<UnaryOperatorExpression>> VisitingUnaryOperatorExpression;
		public event System.EventHandler<VisitedEventArgs<UnaryOperatorExpression>> VisitedUnaryOperatorExpression;
		public event System.EventHandler<VisitingEventArgs<UncheckedExpression>> VisitingUncheckedExpression;
		public event System.EventHandler<VisitedEventArgs<UncheckedExpression>> VisitedUncheckedExpression;
		public event System.EventHandler<VisitingEventArgs<QueryGroupClause>> VisitingQueryGroupClause;
		public event System.EventHandler<VisitedEventArgs<QueryGroupClause>> VisitedQueryGroupClause;
		public event System.EventHandler<VisitingEventArgs<Attribute>> VisitingAttribute;
		public event System.EventHandler<VisitedEventArgs<Attribute>> VisitedAttribute;
		public event System.EventHandler<VisitingEventArgs<AttributeSection>> VisitingAttributeSection;
		public event System.EventHandler<VisitedEventArgs<AttributeSection>> VisitedAttributeSection;
		public event System.EventHandler<VisitingEventArgs<DelegateDeclaration>> VisitingDelegateDeclaration;
		public event System.EventHandler<VisitedEventArgs<DelegateDeclaration>> VisitedDelegateDeclaration;
		public event System.EventHandler<VisitingEventArgs<NamespaceDeclaration>> VisitingNamespaceDeclaration;
		public event System.EventHandler<VisitedEventArgs<NamespaceDeclaration>> VisitedNamespaceDeclaration;
		public event System.EventHandler<VisitingEventArgs<TypeDeclaration>> VisitingTypeDeclaration;
		public event System.EventHandler<VisitedEventArgs<TypeDeclaration>> VisitedTypeDeclaration;
		public event System.EventHandler<VisitingEventArgs<ExternAliasDeclaration>> VisitingExternAliasDeclaration;
		public event System.EventHandler<VisitedEventArgs<ExternAliasDeclaration>> VisitedExternAliasDeclaration;
		public event System.EventHandler<VisitingEventArgs<BlockStatement>> VisitingBlockStatement;
		public event System.EventHandler<VisitedEventArgs<BlockStatement>> VisitedBlockStatement;
		public event System.EventHandler<VisitingEventArgs<BreakStatement>> VisitingBreakStatement;
		public event System.EventHandler<VisitedEventArgs<BreakStatement>> VisitedBreakStatement;
		public event System.EventHandler<VisitingEventArgs<CheckedStatement>> VisitingCheckedStatement;
		public event System.EventHandler<VisitedEventArgs<CheckedStatement>> VisitedCheckedStatement;
		public event System.EventHandler<VisitingEventArgs<ContinueStatement>> VisitingContinueStatement;
		public event System.EventHandler<VisitedEventArgs<ContinueStatement>> VisitedContinueStatement;
		public event System.EventHandler<VisitingEventArgs<DoWhileStatement>> VisitingDoWhileStatement;
		public event System.EventHandler<VisitedEventArgs<DoWhileStatement>> VisitedDoWhileStatement;
		public event System.EventHandler<VisitingEventArgs<ExpressionStatement>> VisitingExpressionStatement;
		public event System.EventHandler<VisitedEventArgs<ExpressionStatement>> VisitedExpressionStatement;
		public event System.EventHandler<VisitingEventArgs<FixedStatement>> VisitingFixedStatement;
		public event System.EventHandler<VisitedEventArgs<FixedStatement>> VisitedFixedStatement;
		public event System.EventHandler<VisitingEventArgs<ForeachStatement>> VisitingForeachStatement;
		public event System.EventHandler<VisitedEventArgs<ForeachStatement>> VisitedForeachStatement;
		public event System.EventHandler<VisitingEventArgs<ForStatement>> VisitingForStatement;
		public event System.EventHandler<VisitedEventArgs<ForStatement>> VisitedForStatement;
		public event System.EventHandler<VisitingEventArgs<GotoCaseStatement>> VisitingGotoCaseStatement;
		public event System.EventHandler<VisitedEventArgs<GotoCaseStatement>> VisitedGotoCaseStatement;
		public event System.EventHandler<VisitingEventArgs<GotoDefaultStatement>> VisitingGotoDefaultStatement;
		public event System.EventHandler<VisitedEventArgs<GotoDefaultStatement>> VisitedGotoDefaultStatement;
		public event System.EventHandler<VisitingEventArgs<GotoStatement>> VisitingGotoStatement;
		public event System.EventHandler<VisitedEventArgs<GotoStatement>> VisitedGotoStatement;
		public event System.EventHandler<VisitingEventArgs<IfElseStatement>> VisitingIfElseStatement;
		public event System.EventHandler<VisitedEventArgs<IfElseStatement>> VisitedIfElseStatement;
		public event System.EventHandler<VisitingEventArgs<LabelStatement>> VisitingLabelStatement;
		public event System.EventHandler<VisitedEventArgs<LabelStatement>> VisitedLabelStatement;
		public event System.EventHandler<VisitingEventArgs<LockStatement>> VisitingLockStatement;
		public event System.EventHandler<VisitedEventArgs<LockStatement>> VisitedLockStatement;
		public event System.EventHandler<VisitingEventArgs<ReturnStatement>> VisitingReturnStatement;
		public event System.EventHandler<VisitedEventArgs<ReturnStatement>> VisitedReturnStatement;
		public event System.EventHandler<VisitingEventArgs<SwitchStatement>> VisitingSwitchStatement;
		public event System.EventHandler<VisitedEventArgs<SwitchStatement>> VisitedSwitchStatement;
		public event System.EventHandler<VisitingEventArgs<SwitchSection>> VisitingSwitchSection;
		public event System.EventHandler<VisitedEventArgs<SwitchSection>> VisitedSwitchSection;
		public event System.EventHandler<VisitingEventArgs<CaseLabel>> VisitingCaseLabel;
		public event System.EventHandler<VisitedEventArgs<CaseLabel>> VisitedCaseLabel;
		public event System.EventHandler<VisitingEventArgs<ThrowStatement>> VisitingThrowStatement;
		public event System.EventHandler<VisitedEventArgs<ThrowStatement>> VisitedThrowStatement;
		public event System.EventHandler<VisitingEventArgs<TryCatchStatement>> VisitingTryCatchStatement;
		public event System.EventHandler<VisitedEventArgs<TryCatchStatement>> VisitedTryCatchStatement;
		public event System.EventHandler<VisitingEventArgs<CatchClause>> VisitingCatchClause;
		public event System.EventHandler<VisitedEventArgs<CatchClause>> VisitedCatchClause;
		public event System.EventHandler<VisitingEventArgs<UncheckedStatement>> VisitingUncheckedStatement;
		public event System.EventHandler<VisitedEventArgs<UncheckedStatement>> VisitedUncheckedStatement;
		public event System.EventHandler<VisitingEventArgs<UnsafeStatement>> VisitingUnsafeStatement;
		public event System.EventHandler<VisitedEventArgs<UnsafeStatement>> VisitedUnsafeStatement;
		public event System.EventHandler<VisitingEventArgs<UsingStatement>> VisitingUsingStatement;
		public event System.EventHandler<VisitedEventArgs<UsingStatement>> VisitedUsingStatement;
		public event System.EventHandler<VisitingEventArgs<VariableDeclarationStatement>> VisitingVariableDeclarationStatement;
		public event System.EventHandler<VisitedEventArgs<VariableDeclarationStatement>> VisitedVariableDeclarationStatement;
		public event System.EventHandler<VisitingEventArgs<WhileStatement>> VisitingWhileStatement;
		public event System.EventHandler<VisitedEventArgs<WhileStatement>> VisitedWhileStatement;
		public event System.EventHandler<VisitingEventArgs<YieldBreakStatement>> VisitingYieldBreakStatement;
		public event System.EventHandler<VisitedEventArgs<YieldBreakStatement>> VisitedYieldBreakStatement;
		public event System.EventHandler<VisitingEventArgs<YieldReturnStatement>> VisitingYieldReturnStatement;
		public event System.EventHandler<VisitedEventArgs<YieldReturnStatement>> VisitedYieldReturnStatement;
		public event System.EventHandler<VisitingEventArgs<Accessor>> VisitingAccessor;
		public event System.EventHandler<VisitedEventArgs<Accessor>> VisitedAccessor;
		public event System.EventHandler<VisitingEventArgs<ConstructorDeclaration>> VisitingConstructorDeclaration;
		public event System.EventHandler<VisitedEventArgs<ConstructorDeclaration>> VisitedConstructorDeclaration;
		public event System.EventHandler<VisitingEventArgs<ConstructorInitializer>> VisitingConstructorInitializer;
		public event System.EventHandler<VisitedEventArgs<ConstructorInitializer>> VisitedConstructorInitializer;
		public event System.EventHandler<VisitingEventArgs<DestructorDeclaration>> VisitingDestructorDeclaration;
		public event System.EventHandler<VisitedEventArgs<DestructorDeclaration>> VisitedDestructorDeclaration;
		public event System.EventHandler<VisitingEventArgs<EnumMemberDeclaration>> VisitingEnumMemberDeclaration;
		public event System.EventHandler<VisitedEventArgs<EnumMemberDeclaration>> VisitedEnumMemberDeclaration;
		public event System.EventHandler<VisitingEventArgs<EventDeclaration>> VisitingEventDeclaration;
		public event System.EventHandler<VisitedEventArgs<EventDeclaration>> VisitedEventDeclaration;
		public event System.EventHandler<VisitingEventArgs<CustomEventDeclaration>> VisitingCustomEventDeclaration;
		public event System.EventHandler<VisitedEventArgs<CustomEventDeclaration>> VisitedCustomEventDeclaration;
		public event System.EventHandler<VisitingEventArgs<FieldDeclaration>> VisitingFieldDeclaration;
		public event System.EventHandler<VisitedEventArgs<FieldDeclaration>> VisitedFieldDeclaration;
		public event System.EventHandler<VisitingEventArgs<IndexerDeclaration>> VisitingIndexerDeclaration;
		public event System.EventHandler<VisitedEventArgs<IndexerDeclaration>> VisitedIndexerDeclaration;
		public event System.EventHandler<VisitingEventArgs<MethodDeclaration>> VisitingMethodDeclaration;
		public event System.EventHandler<VisitedEventArgs<MethodDeclaration>> VisitedMethodDeclaration;
		public event System.EventHandler<VisitingEventArgs<OperatorDeclaration>> VisitingOperatorDeclaration;
		public event System.EventHandler<VisitedEventArgs<OperatorDeclaration>> VisitedOperatorDeclaration;
		public event System.EventHandler<VisitingEventArgs<ParameterDeclaration>> VisitingParameterDeclaration;
		public event System.EventHandler<VisitedEventArgs<ParameterDeclaration>> VisitedParameterDeclaration;
		public event System.EventHandler<VisitingEventArgs<PropertyDeclaration>> VisitingPropertyDeclaration;
		public event System.EventHandler<VisitedEventArgs<PropertyDeclaration>> VisitedPropertyDeclaration;
		public event System.EventHandler<VisitingEventArgs<VariableInitializer>> VisitingVariableInitializer;
		public event System.EventHandler<VisitedEventArgs<VariableInitializer>> VisitedVariableInitializer;
		public event System.EventHandler<VisitingEventArgs<FixedFieldDeclaration>> VisitingFixedFieldDeclaration;
		public event System.EventHandler<VisitedEventArgs<FixedFieldDeclaration>> VisitedFixedFieldDeclaration;
		public event System.EventHandler<VisitingEventArgs<FixedVariableInitializer>> VisitingFixedVariableInitializer;
		public event System.EventHandler<VisitedEventArgs<FixedVariableInitializer>> VisitedFixedVariableInitializer;
		public event System.EventHandler<VisitingEventArgs<DocumentationReference>> VisitingDocumentationReference;
		public event System.EventHandler<VisitedEventArgs<DocumentationReference>> VisitedDocumentationReference;
		public event System.EventHandler<VisitingEventArgs<TypeParameterDeclaration>> VisitingTypeParameterDeclaration;
		public event System.EventHandler<VisitedEventArgs<TypeParameterDeclaration>> VisitedTypeParameterDeclaration;
		public event System.EventHandler<VisitingEventArgs<Constraint>> VisitingConstraint;
		public event System.EventHandler<VisitedEventArgs<Constraint>> VisitedConstraint;
		public event System.EventHandler<VisitingEventArgs<CSharpTokenNode>> VisitingCSharpTokenNode;
		public event System.EventHandler<VisitedEventArgs<CSharpTokenNode>> VisitedCSharpTokenNode;
		public event System.EventHandler<VisitingEventArgs<Identifier>> VisitingIdentifier;
		public event System.EventHandler<VisitedEventArgs<Identifier>> VisitedIdentifier;
	}
}